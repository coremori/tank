// Generated by dia2code
#ifndef ENGINE__ENGINE__H
#define ENGINE__ENGINE__H

#include "state/State.h"
#include <mutex>
#include <stdint.h>

namespace engine {
  class CommandSet;
  class Command;
  class Record;
  class Ruler;
}

#include "EngineMode.h"
#include "Record.h"
#include "Ruler.h"
#include "CommandSet.h"

namespace engine {

  /// class Engine - Pilote of the game
  class Engine {
    // Associations
    engine::Record reccord;
    engine::EngineMode mode;
    engine::Ruler ruler;
    // Attributes
  protected:
    CommandSet* currentcommands;
    CommandSet* waitingcommands;
    int charTurn;
    state::State* state;
    mutable std::mutex commands_mutex;
    mutable std::mutex update_mutex;
    bool AnimRunning;
    int64_t lastEndTurnTime;
    // Operations
  public:
    Engine (state::State* s);
    ~Engine ();
    void addCommand (Command* cmd);
    void setMode (EngineMode m);
    EngineMode getMode () const;
    void endTurn ();
    void swapCommands ();
    void update (int64_t timeNow);
    std::mutex& getUpdateMutex () const;
    void setAnimRunning (bool b);
    int getCharTurn () const;
    void takeCommands (CommandSet* commandset);
  };

};

#endif
