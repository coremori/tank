// Generated by dia2code
#ifndef CLIENT__PILOTESFML__H
#define CLIENT__PILOTESFML__H

#include "state/State.h"
#include "render/Scene.h"
#include <vector>
#include "render/SurfaceSFML.hpp"
#include "engine/Engine.h"
#include <SFML/Graphics.hpp>
namespace client {
  class CacheStateObserver;
  class PiloteRendu;
}

#include "PiloteRendu.h"
#include "CacheStateObserver.h"

namespace client {

  /// class PiloteSFML - 
  class PiloteSFML : public client::PiloteRendu {
    // Associations
    // Attributes
  protected:
    state::State* state;
    render::Scene scene;
    std::vector<CacheStateObserver*>  obs;
    std::vector<SurfaceSFML*> surfaces;
    engine::Engine* engine;
    sf::Texture m_tilesetButton;
    std::vector<sf::Sprite*> s_button;
    int character;
    // Operations
  public:
    PiloteSFML (state::State* s, engine::Engine* e);
    ~PiloteSFML ();
    void display ();
    void setEngine (engine::Engine* e);
    void eventUp (sf::Event* event, engine::Engine* engine, int character, sf::IntRect* rectEnd, sf::IntRect* rectLevel1, sf::IntRect* rectLevel2, sf::Vector2i localPosition);
  protected:
    void button (unsigned int x1, unsigned int xTex, unsigned int width, bool SpriteOrVertex, int numSprite = 0);
    void applyChange ();
    void createMenu ();
  };

};

#endif
